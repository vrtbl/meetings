

Label associated value -- associated value
value field value -- field value
value index value -- index value
value apply function_value -- function application
function_valule value -- function call

Label :: value -- associated value
value :: value -- field value
value [ value ] -- index value
value . function_value -- function application
function_valule value -- function call

-{
    value.name,
    where value is a Label,
    and Label::name exists,
    is Label::name,
    otherwise is name value.
}

-{
    type Label PatternA

    PatternB: Label = data
    -- data must match Label
    -- inner data must match PatternA
    -- data is destructured via PatternB

    Label PatternC = data
    -- data must match Label
    -- inner data must match PatternA
    -- inner data is destructured via PatternC
}-

-{
    -- record
    type Position {
        x: Natural,
        y: Natural,
    }

    { inden_a: LabelA, inden_b: LabelB, .. }

    -- tuple
    type Position (
        x: Natural,
        y: Natural,
    )

    ( PatternA, PatternB, .. )

    -- enum
    type Position {
        X Natural,
        Y Natural,
    }

    { LabelA PatternA, LabelB PatternB, .. }
}-
